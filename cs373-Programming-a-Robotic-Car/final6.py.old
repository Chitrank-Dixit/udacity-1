#!/usr/bin/env python

colors = [['g', 'g'],
          ['r', 'r']]

measurements = ['r']

motions = [[0,1]]

sensor_error = .2
sensor_right = 1-sensor_error

p_move = 1.0

def show(p):
    for i in range(len(p)):
        print p[i]

p = []
def normalize_p(p):
    s=0.
    for row in p:
        s+=sum(row) 
    if s>0.:
        for row,p_row in enumerate(p):
            for col,p_col in enumerate(p_row):
                p[row][col] /= s
    return p

def sense_p(p, meas, world, sense_right):
    q=[]
    for i in range(len(p)):
        q.append([])
        for j in range(len(p[i])):
            q[i].append(0.)
            hit = (meas == world[i][j])
            q[i][j] = (p[i][j] * (hit * sense_right + (1-hit) * (1-sense_right)))
    q = normalize_p(q)
    return q

def move_p(p, motion, p_move):
    pExact = p_move
    pUndershoot = 1-p_move
    pOvershoot = 0
    q=[]
    for i in range(len(p)):
        q.append([])
        for j in range(len(p[i])):
            q[i].append(0.)
            s = pExact * p[(i-motion[0]) % len(p)][(j-motion[1]) % len(p[i])]
            #s = s + pOvershoot * p[(i-motion[0]-1) % len(p)][(i-motion[1]-1) % len(p[i])]
            s = s + pUndershoot * p[i][j]
            q[i][j]=s
    return q

def compute_p(colors,measurements,motions,sensor_right,p_move):
    rows = len(colors)
    cols = len(colors[0])
    p_const = 1./(rows*cols)
    p=[]
    for i in range(rows):
        p.append([])
        for j in range(cols):
            p[i].append(p_const)
    for i,mot in enumerate(motions): 
        p  = move_p(p,mot,p_move)
        p  = sense_p(p, measurements[i], colors, sensor_right)
    return p

p=compute_p(colors,measurements,motions,sensor_right,p_move)
#Your probability array must be printed 
#with the following code.

show(p)


